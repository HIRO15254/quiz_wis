// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  refresh_token_expires_in Int?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(cuid())
  isActive Boolean @default(true)
  role UserRole @default(USER)
  userId String? @unique
  name String?
  email String @unique
  emailVerified DateTime?
  trueEmail String?
  image String?
  accounts Account[]

  quizLists QuizList[]
  quizzes Quiz[]
  genreSets GenreSet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizList {
  databaseId String @id @default(cuid())

  name String
  description String?

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  goal Int?

  quizzes Quiz[]
  genreSetId String?
  genreSet GenreSet? @relation(fields: [genreSetId], references: [databaseId], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  databaseId String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizListId String @map("quizlistId")
  quizList QuizList @relation(fields: [quizListId], references: [databaseId], onDelete: Cascade)

  question String?
  answer String?
  otherAnswer String?
  explanation String?
  source String?
  length Int @default(0)

  genre Genre? @relation(fields: [genreId], references: [databaseId], onDelete: SetNull)
  genreId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreSet {
  databaseId String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  name String
  description String?

  genres Genre[]

  quizLists QuizList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  databaseId String @id @default(cuid())

  genreSetId String
  genreSet GenreSet @relation(fields: [genreSetId], references: [databaseId], onDelete: Cascade)

  parentGenreId String?
  parentGenre Genre? @relation("GenreTree", fields: [parentGenreId], references: [databaseId], onDelete: Cascade)
  childGenres Genre[] @relation("GenreTree")

  name String
  color String @default("gray")
  description String?
  ratio Int @default(1)

  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([genreSetId, name])
}

enum UserRole {
  ADMIN
  USER
}
